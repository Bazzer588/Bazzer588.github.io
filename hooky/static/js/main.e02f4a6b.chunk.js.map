{"version":3,"sources":["logo.svg","InputField.js","useHierarchyReducer.js","data/index.js","Address.js","AddressList.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","React","memo","_ref","name","_ref$value","value","path","options","dispatch","props","Object","objectWithoutProperties","id","onChange","ev","type","key","target","react_default","a","createElement","assign","keys","map","opt","renderOptions","SET","useHierarchyReducer","reducer","state","ref","useRef","doAction","action","mod","setHierarchyValue","useLayoutEffect","current","useCallback","apply","arguments","regions","US","CA","CanadaProvinces","zipLabel","GB","CN","Countries","CountryList","reducerAddress","objectSpread","defineProperty","province","address","zip","dispatchAddress","field","fieldName","label","src_InputField","console","log","addressKey","country","className","reducerAddressList","toConsumableArray","splice","dbg","i","r","length","reverse","Array","isArray","standardReducer","Compo","dispatchList","output","index","data-xkey","style","position","onClick","keySequence","lst","join","reducerApp","window","lastState","homeAddress","previousAddresses","_useReducer","useReducer","_useReducer2","slicedToArray","dispatchApp","renderAddress","src_Address","counter","src","logo","alt","autoComplete","src_AddressList","Address","JSON","stringify","href","rel","setTimeout","Root","App","ReactDOM","render","document","getElementById"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kiDC4BzBC,UAAMC,KA1BrB,SAAAC,GAA8E,IAAvDC,EAAuDD,EAAvDC,KAAuDC,EAAAF,EAAjDG,aAAiD,IAAAD,EAAzC,GAAyCA,EAArCE,EAAqCJ,EAArCI,KAAMC,EAA+BL,EAA/BK,QAASC,EAAsBN,EAAtBM,SAAaC,EAASC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,8CAIpEU,EAAKN,EAAK,IAAIH,EAEpB,SAASU,EAAUC,GACfN,EAAS,CAAEO,KAAM,MAAOC,IAAKb,EAAME,MAAOS,EAAGG,OAAOZ,QAGxD,OACIE,EACIW,EAAAC,EAAAC,cAAA,SAAAV,OAAAW,OAAA,CAAQT,GAAIA,GAAQH,EAApB,CAA2BI,SAAUA,EAAUR,MAAOA,IAClDa,EAAAC,EAAAC,cAAA,UAAQf,MAAM,KAQ9B,SAAwBE,GAEpB,OADaG,OAAOY,KAAKf,GACbgB,IAAK,SAACC,GAAD,OAASN,EAAAC,EAAAC,cAAA,UAAQJ,IAAKQ,EAAKnB,MAAOmB,GAAMjB,EAAQiB,MATpDC,CAAclB,IAGnBW,EAAAC,EAAAC,cAAA,QAAAV,OAAAW,OAAA,CAAOT,GAAIA,EAAIG,KAAK,QAAWN,EAA/B,CAAsCI,SAAUA,EAAUR,MAAOA,eCjBvEqB,EAAM,MAoBL,SAASC,EAAqBC,EAAQC,EAAM1B,EAAKK,GAEpD,IAAMsB,EAAM9B,IAAM+B,OAAO,MAEnBC,EAAW,SAACC,GACd,IAAMC,EAAMN,EAAQC,EAAMI,GACtBC,IAAQL,GACRM,EAAkB3B,EAASL,EAAK+B,IAQxC,OAJAE,0BAAiB,WACbN,EAAIO,QAAUL,GACf,CAACH,EAAM1B,IAEHmC,sBAAa,WAChB,OAAOR,EAAIO,QAAJE,MAAAT,EAAGU,YACX,CAACV,IAGD,SAASK,EAAmB3B,EAASQ,EAAIX,GAC5CG,EAAS,CAAEO,KAAMW,EAAKV,MAAKX,8BCvClBoC,EAAU,CACnBC,SACAC,GAAIC,GAGKC,EAAW,CACpBC,GAAI,YACJC,GAAI,4BAGKC,EAAYC,ECTnBC,EAAiB,SAACrB,EAAMI,GAC1B,GAAkB,QAAdA,EAAOlB,KAAc,CACrB,IAAMmB,EAAGxB,OAAAyC,EAAA,EAAAzC,CAAA,GACFmB,EADEnB,OAAA0C,EAAA,EAAA1C,CAAA,GAEJuB,EAAOjB,IAAMiB,EAAO5B,QAQzB,MANiB,YAAb4B,EAAOjB,MACPkB,EAAImB,SAAWnB,EAAIoB,QAAUpB,EAAIqB,IAAM,GACpB,OAAftB,EAAO5B,QACP6B,EAAImB,SAAW,aAGhBnB,IAkDAlC,UAAMC,KAvCrB,SAAAC,GAAkD,IAA9BC,EAA8BD,EAA9BC,KAA8BC,EAAAF,EAAxBG,aAAwB,IAAAD,EAAhB,GAAgBA,EAAZI,EAAYN,EAAZM,SAE5BgD,EAAkB7B,EAAoBuB,EAAe7C,EAAMF,EAAKK,GAItE,SAASiD,EAAOC,EAAWC,EAAOpD,GAC9B,OAAOW,EAAAC,EAAAC,cAAA,UACHF,EAAAC,EAAAC,cAAA,UAAKuC,GACLzC,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACwC,EAAD,CACIzD,KAAMuD,EACNpD,KAAMH,EACNE,MAAOA,EAAMqD,GACbnD,QAASA,EACTC,SAAUgD,MAX1BK,QAAQC,IAAI,MAAMzD,EAAM0D,WAAW1D,EAAM2D,SAiBzC,IAAMA,EAAU3D,EAAM2D,QAEtB,OACI9C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,SAAIjB,IACPe,EAAAC,EAAAC,cAAA,SAAO6C,UAAU,WACb/C,EAAAC,EAAAC,cAAA,aACCqC,EAAM,UAAU,UAAUT,GAC1BS,EAAM,WAAW,mBAAmBhB,EAAQuB,IAC5CP,EAAM,UAAU,WAChBA,EAAM,MAAMZ,EAASmB,IAAY,iBCxD5CE,EAAqB,SAACrC,EAAMI,GAC9B,IAAMC,EAAGxB,OAAAyD,EAAA,EAAAzD,CAAOmB,GAChB,OAAQI,EAAOlB,MAKX,IAAK,SACDmB,EAAIkC,OAAOnC,EAAOjB,IAAI,GACtB6C,QAAQC,IAAI,SAAS7B,EAAOjB,IAAIqD,EAAIxC,IACpC,MAEJ,IAAK,SACDK,EAAIkC,OAAOnC,EAAOjB,IAAI,EAAEiB,EAAO5B,OAC/BwD,QAAQC,IAAI,SAASO,EAAInC,IACzB,MAEJ,IAAK,KACD,IAAMoC,EAAIrC,EAAOjB,IACjB,GAAIsD,EAAE,EAAG,OAAOzC,EAChB,IAAM0C,EAAIrC,EAAIoC,GACdpC,EAAIoC,GAAKpC,EAAIoC,EAAE,GACfpC,EAAIoC,EAAE,GAAKC,EACX,MAEJ,IAAK,OACD,IAAMD,EAAIrC,EAAOjB,IACjB,GAAIsD,GAAGzC,EAAM2C,OAAO,EAAG,OAAO3C,EAC9B,IAAM0C,EAAIrC,EAAIoC,GACdpC,EAAIoC,GAAKpC,EAAIoC,EAAE,GACfpC,EAAIoC,EAAE,GAAKC,EACX,MAEJ,IAAK,UACDrC,EAAIuC,UACJZ,QAAQC,IAAI,WAAWO,EAAInC,IAC3B,MAEJ,QACI,OHtCmB,SAACL,EAAMI,GAClC,GAAIA,EAAOlB,OAASW,EAAK,CAGrB,GAAIG,EAAMI,EAAOjB,OAASiB,EAAO5B,MAC7B,OAAOwB,EAEX,GAAI6C,MAAMC,QAAQ9C,GAAQ,CACtB,IAAMK,EAAGxB,OAAAyD,EAAA,EAAAzD,CAAOmB,GAEhB,OADAK,EAAID,EAAOjB,KAAOiB,EAAO5B,MAClB6B,EAEP,OAAOxB,OAAAyC,EAAA,EAAAzC,CAAA,GAAKmB,EAAZnB,OAAA0C,EAAA,EAAA1C,CAAA,GAAoBuB,EAAOjB,IAAMiB,EAAO5B,QAGhD,OAAOwB,EGuBQ+C,CAAgB/C,EAAMI,GAErC,OAAOC,GAkDIlC,UAAMC,KA/CrB,SAAAC,GAA6D,IAArCC,EAAqCD,EAArCC,KAAqCC,EAAAF,EAA/BG,aAA+B,IAAAD,EAAvB,GAAuBA,EAAnBI,EAAmBN,EAAnBM,SAAUqE,EAAS3E,EAAT2E,MAEhDhB,QAAQC,IAAI,cAAc3D,EAAMkE,EAAIhE,IAEpC,IAAMyE,EAAenD,EAAoBuC,EAAmB7D,EAAMF,EAAKK,GAEjEuE,EAAS1E,EAAMkB,IAAK,SAAC+B,EAAQ0B,GAC/B,OACI9D,EAAAC,EAAAC,cAAA,OAAKJ,IAAKb,EAAK,IAAI6E,EAAOC,YAAW3B,EAAQS,WAAYmB,MAAO,CAAEC,SAAU,aACxEjE,EAAAC,EAAAC,cAAA,QAAM6C,UAAU,aACZ/C,EAAAC,EAAAC,cAAA,UAAQgE,QAAS,kBAAMN,EAAa,CAAE/D,KAAM,KAAMC,IAAKgE,KAAUjE,KAAK,UAAtE,MACC,IACDG,EAAAC,EAAAC,cAAA,UAAQgE,QAAS,kBAAMN,EAAa,CAAE/D,KAAM,OAAQC,IAAKgE,KAAUjE,KAAK,UAAxE,QACC,IACDG,EAAAC,EAAAC,cAAA,UAAQgE,QAAS,kBAAMN,EAAa,CAAE/D,KAAM,SAAUC,IAAKgE,KAAUjE,KAAK,UAA1E,WAEJG,EAAAC,EAAAC,cAACyD,EAAD,CAAO1E,KAAM6E,EAAO3E,MAAOiD,EAAS9C,SAAUsE,OAK1D,OACI5D,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,SAAIjB,IACN4E,EACD7D,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,UAAQgE,QAAS,kBAAMN,EAAa,CAAE/D,KAAM,MAAOC,IAAKX,EAAMmE,OAAQnE,MAAO,CAAE0D,WAAY,IAAKsB,QAAqBtE,KAAK,UAA1H,uBAGC,IACAV,EAAMmE,OAAS,GACZtD,EAAAC,EAAAC,cAAA,UAAQgE,QAAS,kBAAMN,EAAa,CAAC/D,KAAM,aAAaA,KAAK,UAA7D,gBAIH,IACIV,EAAMmE,OAAO,GACdtD,EAAAC,EAAAC,cAAA,UAAQgE,QAAS,kBAAMN,EAAa,CAAC/D,KAAM,SAAUC,IAAK,EAAGX,MAAO,CAAE0D,WAAY,IAAKsB,QAAqBtE,KAAK,UAAjH,cAahBsE,EAAc,EAElB,SAAShB,EAAKiB,GACV,MAAO,IAAIA,EAAI/D,IAAK,SAAAJ,GAAC,OAAIA,EAAE4C,aAAawB,KAAK,KAAK,ICpFtD,SAASC,EAAY3D,EAAMI,GAEvB,IAAIC,EACJ,OAFA2B,QAAQC,IAAI,cAAc7B,EAAOlB,KAAKkB,EAAOjB,KAEtCiB,EAAOlB,MACV,IAAK,MACDmB,EAAGxB,OAAAyC,EAAA,EAAAzC,CAAA,GACImB,EADJnB,OAAA0C,EAAA,EAAA1C,CAAA,GAEEuB,EAAOjB,IAAMiB,EAAO5B,QAEzB,MAEJ,IAAK,QACD6B,EAAM,GACN,MAEJ,QACIA,EAAML,EAGd,OADA4D,OAAOC,UAAYxD,EACZA,EAtBNuD,OAAOC,YACRD,OAAOC,UANU,CACjBC,YAAa,CAAE3B,QAAS,KAAMX,SAAU,MACxCuC,kBAAmB,CAAC,CAAE7B,WAAY,IAAKC,QAAS,KAAMX,SAAU,SA8FrDrD,UAAMC,KAlErB,WAAgB,IAAA4F,EAIiBC,qBAAWN,EAAWC,OAAOC,WAJ9CK,EAAArF,OAAAsF,EAAA,EAAAtF,CAAAmF,EAAA,GAILhE,EAJKkE,EAAA,GAIEE,EAJFF,EAAA,GAQZ,SAASG,EAAe/F,GACpB,OAAOe,EAAAC,EAAAC,cAAC+E,EAAD,CAASnF,IAAKb,EAAMA,KAAMA,EAAME,MAAOwB,EAAM1B,GAAOK,SAAUyF,IAHzEpC,QAAQC,IAAI,cAMZ,IAAMsC,EAAUvE,EAAMuE,SAAW,EAEjC,OACIlF,EAAAC,EAAAC,cAAA,OAAK6C,UAAU,OACX/C,EAAAC,EAAAC,cAAA,UAAQ6C,UAAU,cACd/C,EAAAC,EAAAC,cAAA,OAAKiF,IAAKC,IAAMrC,UAAU,WAAWsC,IAAI,UAE7CrF,EAAAC,EAAAC,cAAA,QAAMoF,aAAa,OAEnBtF,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,UAAQgE,QAAS,kBAAMa,EAAY,CAAElF,KAAM,MAAOC,IAAK,UAAWX,MAAO+F,EAAQ,KAAMrF,KAAK,UAA5F,MACC,IAAKqF,EAAS,IACflF,EAAAC,EAAAC,cAAA,UAAQgE,QAAS,kBAAMa,EAAY,CAAElF,KAAM,MAAOC,IAAK,UAAWX,MAAO+F,EAAQ,KAAMrF,KAAK,UAA5F,OAGHmF,EAAc,eACdA,EAAc,eACdA,EAAc,qBAEfhF,EAAAC,EAAAC,cAACqF,EAAD,CACItG,KAAK,oBACLE,MAAOwB,EAAM+D,kBACbf,MAAO6B,EACPlG,SAAUyF,IAGd/E,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,kBACHF,EAAAC,EAAAC,cAAA,YACKuF,KAAKC,UAAU/E,EAAM,KAAK,OAG/BX,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,KAAGyF,KAAK,oDAAoD5F,OAAO,SAAS6F,IAAI,uBAAhF,sDAKA5F,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,UAAQgE,QAAS,kBAAMa,EAAY,CAAElF,KAAM,WAAYA,KAAK,UAA5D,aACC,IACDG,EAAAC,EAAAC,cAAA,UAAQgE,QAAS,kBAAMjD,EAAkB8D,EAAY,oBAAoB,KAAKlF,KAAK,UAAnF,cACC,IACDG,EAAAC,EAAAC,cAAA,UAAQgE,QAAS,WACbjD,EAAkB8D,EAAY,cAAc,IAC5C9D,EAAkB8D,EAAY,cAAc,IAC5C9D,EAAkB8D,EAAY,oBAAoB,KACnDlF,KAAK,UAJR,qBClFpB0E,OAAOsB,WAAY,kBAJJC,EAIiBC,OAH5BC,IAASC,OAAOjG,EAAAC,EAAAC,cAAC4F,EAAD,MAASI,SAASC,eAAe,SADtC,IAAAL,GAIuB","file":"static/js/main.e02f4a6b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nfunction InputField ({ name, value = '', path, options, dispatch, ...props }) {\r\n\r\n    // console.log('F',path,name,value);\r\n\r\n    const id = path+'-'+name;\r\n\r\n    function onChange (ev) {\r\n        dispatch({ type: 'SET', key: name, value: ev.target.value }); // notify the parent\r\n    }\r\n\r\n    return (\r\n        options ?\r\n            <select id={id} {...props} onChange={onChange} value={value}>\r\n                <option value=\"\" />\r\n                {renderOptions(options)}\r\n            </select>\r\n            :\r\n            <input id={id} type=\"text\" {...props} onChange={onChange} value={value} />\r\n    );\r\n}\r\n\r\nfunction renderOptions (options) {\r\n    const list = Object.keys(options);\r\n    return list.map( (opt) => <option key={opt} value={opt}>{options[opt]}</option> );\r\n}\r\n\r\nexport default React.memo(InputField);\r\n","import React, {useCallback, useLayoutEffect} from \"react\";\r\n\r\nconst SET = 'SET';\r\n\r\nexport const standardReducer = (state,action) => {\r\n    if (action.type === SET) {\r\n\r\n        // has the value changed ?\r\n        if (state[action.key] === action.value) {\r\n            return state;  // no change\r\n        }\r\n        if (Array.isArray(state)) {\r\n            const mod = [...state];\r\n            mod[action.key] = action.value;\r\n            return mod;\r\n        } else {\r\n            return { ...state, [action.key]: action.value };\r\n        }\r\n    }\r\n    return state;\r\n};\r\n\r\nexport function useHierarchyReducer (reducer,state,name,dispatch) {\r\n\r\n    const ref = React.useRef(null);\r\n\r\n    const doAction = (action) => {\r\n        const mod = reducer(state,action);\r\n        if (mod !== state) {\r\n            setHierarchyValue(dispatch,name,mod);  // notify parent in tree\r\n        }\r\n    };\r\n\r\n    useLayoutEffect( () => {\r\n        ref.current = doAction;\r\n    }, [state,name]);\r\n\r\n    return useCallback( (...args) => {\r\n        return ref.current(...args);\r\n    }, [ref]);\r\n}\r\n\r\nexport function setHierarchyValue (dispatch,key,value) {\r\n    dispatch({ type: SET, key, value });\r\n}\r\n","import CountryList from './data-countries.json';\r\nimport CanadaProvinces from './data-canada.json';\r\nimport USAStates from './data-usa.json';\r\n\r\nexport const regions = {\r\n    US: USAStates,\r\n    CA: CanadaProvinces\r\n};\r\n\r\nexport const zipLabel = {\r\n    GB: 'Post code',\r\n    CN: '邮政编码'\r\n};\r\n\r\nexport const Countries = CountryList;\r\n","import React from 'react';\r\nimport InputField from './InputField';\r\nimport {useHierarchyReducer} from \"./useHierarchyReducer\";\r\nimport { Countries, regions, zipLabel } from './data';\r\n\r\nconst reducerAddress = (state,action) => {\r\n    if (action.type==='SET') {\r\n        const mod = {\r\n            ...state,\r\n            [action.key]: action.value\r\n        };\r\n        if (action.key==='country') {\r\n            mod.province = mod.address = mod.zip = '';  // if changing country, reset these\r\n            if (action.value==='GB') {\r\n                mod.province = 'Somerset';\r\n            }\r\n        }\r\n        return mod;\r\n    }\r\n};\r\n\r\n/** A reusable Address component\r\n *\r\n * @param name should be unique on the page, for example 'homeAddress', 'otherAddress', 'newAddress'\r\n * @param value an object or undefined to start, ie { country: '', province: '', address: '', zip: '' }\r\n * @param dispatch - call with { type: 'SET', key: name, value: mod }\r\n */\r\n\r\nfunction Address ({ name, value = {}, dispatch }) {\r\n\r\n    const dispatchAddress = useHierarchyReducer(reducerAddress,value,name,dispatch);\r\n\r\n    console.log('RAD',value.addressKey,value.country);\r\n\r\n    function field (fieldName, label, options) {\r\n        return <tr>\r\n            <th>{label}</th>\r\n            <td>\r\n                <InputField\r\n                    name={fieldName}\r\n                    path={name}\r\n                    value={value[fieldName]}\r\n                    options={options}\r\n                    dispatch={dispatchAddress}\r\n                />\r\n            </td>\r\n        </tr>;\r\n    }\r\n\r\n    const country = value.country;\r\n\r\n    return (\r\n        <div>\r\n            <p><b>{name}</b></p>\r\n            <table className=\"Address\">\r\n                <tbody>\r\n                {field('country','Country',Countries)}\r\n                {field('province','State / Province',regions[country])}\r\n                {field('address','Address')}\r\n                {field('zip',zipLabel[country] || 'Zip Code')}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default React.memo(Address);\r\n","import React from 'react';\r\nimport {useHierarchyReducer, standardReducer} from \"./useHierarchyReducer\";\r\n\r\nconst reducerAddressList = (state,action) => {   // state is an array []\r\n    const mod = [...state];\r\n    switch (action.type) {\r\n        // case 'SET': {\r\n        //     mod[action.key] = action.value;\r\n        //     break;\r\n        // }\r\n        case 'DELETE': {\r\n            mod.splice(action.key,1);\r\n            console.log('DELETE',action.key,dbg(state));\r\n            break;\r\n        }\r\n        case 'INSERT': {\r\n            mod.splice(action.key,0,action.value);\r\n            console.log('INSERT',dbg(mod));\r\n            break;\r\n        }\r\n        case 'UP': {\r\n            const i = action.key;\r\n            if (i<1) return state;\r\n            const r = mod[i];\r\n            mod[i] = mod[i-1];\r\n            mod[i-1] = r;\r\n            break;\r\n        }\r\n        case 'DOWN': {\r\n            const i = action.key;\r\n            if (i>=state.length-1) return state;\r\n            const r = mod[i];\r\n            mod[i] = mod[i+1];\r\n            mod[i+1] = r;\r\n            break;\r\n        }\r\n        case 'REVERSE': {\r\n            mod.reverse();\r\n            console.log('REVERSED',dbg(mod));\r\n            break;\r\n        }\r\n        default:\r\n            return standardReducer(state,action);\r\n    }\r\n    return mod;\r\n};\r\n\r\nfunction AddressList ({ name, value = [], dispatch, Compo }) {\r\n\r\n    console.log('RENDER LIST',name, dbg(value) );\r\n\r\n    const dispatchList = useHierarchyReducer(reducerAddressList,value,name,dispatch);\r\n\r\n    const output = value.map( (address,index) => {\r\n        return (\r\n            <div key={name+'.'+index} data-xkey={address.addressKey} style={{ position: 'relative' }}>\r\n                <span className=\"top-right\">\r\n                    <button onClick={() => dispatchList({ type: 'UP', key: index })} type=\"button\">Up</button>\r\n                    {' '}\r\n                    <button onClick={() => dispatchList({ type: 'DOWN', key: index })} type=\"button\">Down</button>\r\n                    {' '}\r\n                    <button onClick={() => dispatchList({ type: 'DELETE', key: index })} type=\"button\">Delete</button>\r\n                </span>\r\n                <Compo name={index} value={address} dispatch={dispatchList} />\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <p><b>{name}</b></p>\r\n            {output}\r\n            <p>\r\n                <button onClick={() => dispatchList({ type: 'SET', key: value.length, value: { addressKey: 'K'+(keySequence++) } })} type=\"button\">\r\n                    Add another address\r\n                </button>\r\n                {' '}\r\n                {value.length > 1 &&\r\n                    <button onClick={() => dispatchList({type: 'REVERSE'})} type=\"button\">\r\n                        Reverse list\r\n                    </button>\r\n                }\r\n                {' '}\r\n                    {value.length>0 &&\r\n                    <button onClick={() => dispatchList({type: 'INSERT', key: 0, value: { addressKey: 'K'+(keySequence++) } })} type=\"button\">\r\n                        Insert\r\n                    </button>\r\n                }\r\n            </p>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default React.memo(AddressList);\r\n\r\n// watch out - hot loading will reset this to 1 !\r\nlet keySequence = 1;\r\n\r\nfunction dbg (lst) {\r\n    return '['+lst.map( a => a.addressKey ).join(',')+']';\r\n}","import React, { useReducer } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Address from './Address';\r\n//import Address from './AddressComponent';\r\nimport AddressList from './AddressList';\r\nimport {setHierarchyValue} from \"./useHierarchyReducer\";\r\n\r\nconst initialState = {\r\n    homeAddress: { country: 'US', province: 'WY' },\r\n    previousAddresses: [{ addressKey: 'X', country: 'CA', province: 'BC' }]\r\n};\r\n\r\nif (!window.lastState)\r\n    window.lastState = initialState;\r\n\r\nfunction reducerApp (state,action) {\r\n    console.log('APP REDUCER',action.type,action.key);\r\n    let mod;\r\n    switch(action.type) {\r\n        case 'SET': {\r\n            mod = {\r\n                ...state,\r\n                [action.key]: action.value\r\n            };\r\n            break;\r\n        }\r\n        case 'CLEAR': {\r\n            mod = {};\r\n            break;\r\n        }\r\n        default:\r\n            mod = state;\r\n    }\r\n    window.lastState = mod;\r\n    return mod;\r\n}\r\n\r\nfunction App () {\r\n\r\n    // console.log('RENDER APP',new Error());\r\n\r\n    const [state, dispatchApp] = useReducer(reducerApp,window.lastState);\r\n\r\n    console.log('RENDER APP'); // ,JSON.stringify(state));\r\n\r\n    function renderAddress (name) {\r\n        return <Address key={name} name={name} value={state[name]} dispatch={dispatchApp} />;\r\n    }\r\n\r\n    const counter = state.counter || 0;\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n            </header>\r\n            <form autoComplete=\"off\">\r\n\r\n            <p>\r\n                <button onClick={() => dispatchApp({ type: 'SET', key: 'counter', value: counter-1 })} type=\"button\">--</button>\r\n                {' '}{counter}{' '}\r\n                <button onClick={() => dispatchApp({ type: 'SET', key: 'counter', value: counter+1 })} type=\"button\">++</button>\r\n            </p>\r\n\r\n            {renderAddress('homeAddress')}\r\n            {renderAddress('workAddress')}\r\n            {renderAddress('correspondAddress')}\r\n\r\n            <AddressList\r\n                name=\"previousAddresses\"\r\n                value={state.previousAddresses}\r\n                Compo={Address}\r\n                dispatch={dispatchApp}\r\n            />\r\n\r\n            <p><b>Data</b></p>\r\n            <code>\r\n                {JSON.stringify(state,null,'  ')}\r\n            </code>\r\n\r\n            <p>\r\n                <a href=\"https://github.com/Bazzer588/hooky-event-callback\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                https://github.com/Bazzer588/hooky-event-callback\r\n                </a>\r\n            </p>\r\n\r\n                <p>See github for full details</p>\r\n                <p>\r\n                    <button onClick={() => dispatchApp({ type: 'CLEAR' })} type=\"button\">Clear All</button>\r\n                    {' '}\r\n                    <button onClick={() => setHierarchyValue(dispatchApp,'previousAddresses',[])} type=\"button\">Reset List</button>\r\n                    {' '}\r\n                    <button onClick={() => {\r\n                        setHierarchyValue(dispatchApp,'homeAddress',{});\r\n                        setHierarchyValue(dispatchApp,'workAddress',{});\r\n                        setHierarchyValue(dispatchApp,'correspondAddress',{});\r\n                    }} type=\"button\">Reset Others</button>\r\n                </p>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(App);\r\n","import 'react-app-polyfill/ie11'; // has to be first\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nconst render = Root => {\r\n    ReactDOM.render(<Root/>, document.getElementById('root'));\r\n};\r\n\r\nwindow.setTimeout( () => render(App), 100 );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n\r\nif (process.env.NODE_ENV==='development') {\r\n    if (module.hot) {\r\n        module.hot.accept('./App', () => {\r\n            //console.log('MOD HOT');\r\n            const NextApp = require('./App').default;\r\n            render(NextApp);\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":""}