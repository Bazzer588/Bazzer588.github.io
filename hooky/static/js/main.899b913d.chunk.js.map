{"version":3,"sources":["logo.svg","useEventCallback.js","InputField.js","Address.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","useEventCallback","fn","dependencies","arguments","length","undefined","ref","useRef","Error","useLayoutEffect","current","concat","Object","toConsumableArray","useCallback","apply","React","memo","_ref","name","_ref$value","value","path","options","onChangeField","props","objectWithoutProperties","console","log","id","onChange","ev","target","react_default","a","createElement","assign","keys","map","opt","key","renderOptions","type","regions","US","CA","CanadaProvinces","zipLabel","GB","CN","onChangeEv","changed","newValue","mod","objectSpread","defineProperty","province","address","zip","field","fieldName","label","src_InputField","country","className","Countries","App","_useState","useState","_useState2","slicedToArray","state","setState","renderAddress","src_Address","counter","src","logo","alt","autoComplete","onClick","JSON","stringify","href","rel","window","setTimeout","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.899b913d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { useLayoutEffect, useMemo, useRef, useCallback } from \"react\"; // eslint-disable-line no-unused-vars\r\n/*\r\nexport default function useEventCallback (fn) {\r\n    const ref = useRef();\r\n    useLayoutEffect(() => {\r\n        ref.current = fn;\r\n    });\r\n    return useMemo(() => {\r\n        //return (...args) => (0, ref.current)(...args);\r\n        return (...args) => ref.current(...args);\r\n    }, []);\r\n}\r\n*/\r\n\r\n/*\r\n    https://github.com/facebook/react/issues/14099\r\n    ==============================================\r\n\r\n    useLayoutEffect ... fires synchronously after all DOM mutations\r\n\r\n    useCallback(fn, inputs) is equivalent to useMemo(() => fn, inputs)\r\n\r\n    const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\r\n\r\n    // the magic\r\n    return useMemo(() => (...args) => (0, ref.current)(...args), []);\r\n*/\r\n\r\n/** this one is the code from\r\n *  https://reactjs.org/docs/hooks-faq.html\r\n *  modified to pass args to the callback\r\n */\r\n\r\nexport default function useEventCallback (fn, dependencies = []) {\r\n    const ref = useRef(() => {\r\n        throw new Error('14099'); // if called during render\r\n    });\r\n\r\n    useLayoutEffect(() => {\r\n        ref.current = fn;\r\n    }, [fn, ...dependencies]);\r\n\r\n    return useCallback((...args) => {\r\n        return ref.current(...args);\r\n    }, [ref]);\r\n}\r\n","import React from 'react';\r\n\r\nfunction InputField ({ name, value = '', path, options, onChangeField, ...props }) {\r\n\r\n    console.log('F',path,name,value);\r\n\r\n    const id = path+'-'+name;\r\n\r\n    function onChange (ev) {\r\n        onChangeField(name,ev.target.value);\r\n    }\r\n\r\n    return (\r\n        options ?\r\n            <select id={id} {...props} onChange={onChange} value={value}>\r\n                <option value=\"\" />\r\n                {renderOptions(options)}\r\n            </select>\r\n            :\r\n            <input id={id} type=\"text\" {...props} onChange={onChange} value={value} />\r\n    );\r\n}\r\n\r\nfunction renderOptions (options) {\r\n    const list = Object.keys(options);\r\n    return list.map( (opt) => <option key={opt} value={opt}>{options[opt]}</option> );\r\n}\r\n\r\nexport default React.memo(InputField);\r\n","import React from 'react';\r\nimport useEventCallback from './useEventCallback';\r\nimport InputField from './InputField';\r\nimport Countries from './data/data-countries.json';\r\nimport CanadaProvinces from './data/data-canada.json';\r\nimport USAStates from './data/data-usa.json';\r\n\r\nfunction Address ({ name, value = {}, onChangeField }) {\r\n\r\n    // console.log('A',name);\r\n\r\n    const onChangeEv = useEventCallback( (changed, newValue) => {\r\n        const mod = { ...value, [changed]: newValue };\r\n        if (changed==='country') {\r\n            mod.province = mod.address = mod.zip = '';  // if changing country, reset these\r\n            if (newValue==='GB') {\r\n                mod.province = 'Somerset';\r\n            }\r\n        }\r\n        onChangeField(name,mod); // notify the parent\r\n    }, [value] );\r\n\r\n    function field (fieldName, label, options) {\r\n        return <tr>\r\n            <th>{label}</th>\r\n            <td>\r\n                <InputField\r\n                    name={fieldName}\r\n                    path={name}\r\n                    value={value[fieldName]}\r\n                    options={options}\r\n                    onChangeField={onChangeEv} />\r\n            </td>\r\n        </tr>;\r\n    }\r\n\r\n    const country = value.country;\r\n\r\n    return (\r\n        <div>\r\n            <p><b>{name}</b></p>\r\n            <table className=\"Address\">\r\n                <tbody>\r\n                {field('country','Country',Countries)}\r\n                {field('province','State / Province',regions[country])}\r\n                {field('address','Address')}\r\n                {field('zip',zipLabel[country] || 'Zip Code')}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nconst regions = {\r\n    US: USAStates,\r\n    CA: CanadaProvinces\r\n};\r\n\r\nconst zipLabel = {\r\n    GB: 'Post code',\r\n    CN: '邮政编码'\r\n};\r\n\r\nexport default React.memo(Address);\r\n","import React, { useState } from 'react';\nimport useEventCallback from './useEventCallback';\nimport logo from './logo.svg';\nimport './App.css';\nimport Address from './Address';\n\nexport default function App () {\n\n    const [state, setState] = useState({});\n\n    const onChangeField = useEventCallback( (changed,newValue) => {\n        setState({ ...state, [changed]: newValue });\n    }, [state] );\n\n    function renderAddress (name) {\n        return <Address name={name} value={state[name]} onChangeField={onChangeField} />;\n    }\n\n    const counter = state.counter || 0;\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n            </header>\n            <form autoComplete=\"off\">\n\n            <p>\n                <button onClick={() => onChangeField('counter',counter-1)} type=\"button\">--</button>\n                {' '}{counter}{' '}\n                <button onClick={() => onChangeField('counter',counter+1)} type=\"button\">++</button>\n            </p>\n\n            {renderAddress('homeAddress')}\n            {renderAddress('workAddress')}\n            {renderAddress('correspondAddress')}\n\n            <p><b>Data</b></p>\n            <code>\n                {JSON.stringify(state,null,'  ')}\n            </code>\n\n            <p>\n                <a href=\"https://github.com/Bazzer588/hooky-event-callback\" target=\"_blank\" rel=\"noopener noreferrer\">\n                https://github.com/Bazzer588/hooky-event-callback\n                </a>\n            </p>\n            </form>\n        </div>\n    );\n}\n\n","import 'react-app-polyfill/ie11'; // has to be first\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nconst render = Root => {\n    ReactDOM.render(<Root/>, document.getElementById('root'));\n};\n\nwindow.setTimeout( () => render(App), 100 );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}